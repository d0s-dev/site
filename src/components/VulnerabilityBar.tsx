import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

interface VulnerabilityBarProps {
  cves: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  className?: string;
  height?: string;
}

export function VulnerabilityBar({ cves, className = "", height = "h-2" }: VulnerabilityBarProps) {
  const [hoveredSeverity, setHoveredSeverity] = useState<string | null>(null);

  const total = cves.critical + cves.high + cves.medium + cves.low;
  
  if (total === 0) {
    return (
      <div className={`${height} bg-green-500/20 rounded-full flex items-center justify-center ${className}`}>
        <div className="w-full h-full bg-green-500 rounded-full" />
      </div>
    );
  }

  const criticalPercent = (cves.critical / total) * 100;
  const highPercent = (cves.high / total) * 100;
  const mediumPercent = (cves.medium / total) * 100;
  const lowPercent = (cves.low / total) * 100;

  const segments = [
    { severity: 'Critical', count: cves.critical, percent: criticalPercent, color: 'bg-red-500', label: 'critical' },
    { severity: 'High', count: cves.high, percent: highPercent, color: 'bg-orange-500', label: 'high' },
    { severity: 'Medium', count: cves.medium, percent: mediumPercent, color: 'bg-yellow-500', label: 'medium' },
    { severity: 'Low', count: cves.low, percent: lowPercent, color: 'bg-blue-500', label: 'low' },
  ].filter(s => s.count > 0);

  return (
    <div className="relative group">
      <div className={`${height} bg-[#1a1a1a] rounded-full overflow-hidden flex ${className}`}>
        {segments.map((segment, index) => (
          <div
            key={segment.label}
            className={`${segment.color} transition-all cursor-pointer hover:opacity-80 relative`}
            style={{ width: `${segment.percent}%` }}
            onMouseEnter={() => setHoveredSeverity(segment.label)}
            onMouseLeave={() => setHoveredSeverity(null)}
          >
            {/* Tooltip */}
            <AnimatePresence>
              {hoveredSeverity === segment.label && (
                <motion.div
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: 5 }}
                  className="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 z-50 bg-[#2d2d2d] border border-white/20 rounded-lg px-3 py-2 shadow-xl pointer-events-none whitespace-nowrap"
                >
                  <div className="text-[#f0f0f0]">
                    {segment.severity}: {segment.count}
                  </div>
                  {/* Arrow */}
                  <div className="absolute top-full left-1/2 -translate-x-1/2 -mt-px">
                    <div className="border-4 border-transparent border-t-[#2d2d2d]" />
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        ))}
      </div>
    </div>
  );
}
